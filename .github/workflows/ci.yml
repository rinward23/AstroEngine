name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: "ci-${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"

jobs:
  gitleaks:
    name: Secrets scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: >-
            detect --source=. --no-git --redact --report-format sarif --report-path gitleaks.sarif

      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.sarif
          if-no-files-found: ignore

  python:
    name: Python quality checks
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: gitleaks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            requirements.in
            pyproject.toml

      - name: Prime Swiss Ephemeris cache
        run: |
          set -euxo pipefail
          EPHE_DIR="$RUNNER_TEMP/swisseph"
          mkdir -p "$EPHE_DIR"
          cp -a datasets/swisseph_stub/. "$EPHE_DIR/"
          echo "SE_EPHE_PATH=$EPHE_DIR" >> "$GITHUB_ENV"

      - name: Install Python dependencies
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip wheel
          pip install -e ".[dev]"
          pip install bandit pip-audit

      - name: Lint with ruff
        run: |
          set -euxo pipefail
          ruff check .

      - name: Type check with mypy
        run: |
          set -euxo pipefail
          mypy --config-file mypy.ini

      - name: Prepare test reports directory
        run: mkdir -p reports

      - name: Run pytest with coverage
        run: |
          set -euxo pipefail
          pytest \
            --junitxml=reports/pytest.xml \
            --cov=astroengine \
            --cov-report=xml \
            --cov-report=term-missing

      - name: Validate Alembic migrations (SQLite & Postgres)
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
        run: |
          set -euxo pipefail
          python scripts/ci/run_migration_roundtrip.py --backends sqlite postgres

      - name: Run maintenance orchestrator
        run: |
          set -euxo pipefail
          python -m astroengine.maint --full --strict

      - name: Enforce 100% Python coverage
        run: |
          set -euxo pipefail
          coverage report --fail-under=100

      - name: Run Bandit (high severity)
        run: |
          set -euxo pipefail
          bandit -c bandit.yaml -r . --severity-level high --confidence-level high --format sarif --output reports/bandit.sarif

      - name: Run pip-audit
        run: |
          set -euxo pipefail
          pip-audit --strict --progress-spinner off > reports/pip-audit.txt

      - name: Upload Python coverage and test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-test-artifacts
          if-no-files-found: ignore
          path: |
            coverage.xml
            reports/

      - name: Upload Bandit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/bandit.sarif

  node:
    name: UI quality checks
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: gitleaks
    env:
      NEXT_TELEMETRY_DISABLED: "1"
    defaults:
      run:
        working-directory: apps/rulepack-authoring-ui
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: apps/rulepack-authoring-ui/package-lock.json

      - name: Install UI dependencies
        run: |
          set -euxo pipefail
          npm ci

      - name: Lint UI
        run: |
          set -euxo pipefail
          npm run lint

      - name: Type check UI
        run: |
          set -euxo pipefail
          npm run typecheck

      - name: npm audit (high severity)
        run: |
          set -euxo pipefail
          npm audit --audit-level=high

      - name: Run vitest with coverage
        run: |
          set -euxo pipefail
          npm run test -- --coverage --runInBand --reporter=junit --outputFile=../vitest-junit.xml

      - name: Enforce 100% UI coverage
        run: |
          set -euxo pipefail
          node scripts/check-vitest-coverage.mjs

      - name: Install Playwright browsers
        run: |
          set -euxo pipefail
          npx playwright install --with-deps

      - name: Run Playwright smoke tests
        run: |
          set -euxo pipefail
          npx playwright test --config=playwright.config.ts

      - name: Upload UI coverage and reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-test-artifacts
          if-no-files-found: ignore
          path: |
            coverage/
            ../vitest-junit.xml
            playwright-report/

  codex-triage:
    name: Codex failure triage
    needs:
      - python
      - node
      - gitleaks
    if: ${{ failure() && secrets.OPENAI_API_KEY != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Codex failure triage
        uses: openai/codex-action@main
        with:
          openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          prompt: >-
            Analyze the failing CI run for AstroEngine, summarizing the root causes and suggesting the minimal code changes needed to pass.
            Refer to the uploaded artifacts when available and prefer concise bullet points.
          codex_args: '["--config","sandbox_mode=\"workspace-read\""]'

  docker:
    name: Build & publish Docker image
    if: >-
      github.event_name == 'push' && (
        (matrix.release == 'main' && github.ref == 'refs/heads/main') ||
        (matrix.release == 'tag' && startsWith(github.ref, 'refs/tags/v'))
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - release: main
            push_latest: true
            push_branch: true
            push_semver: false
          - release: tag
            push_latest: true
            push_branch: false
            push_semver: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image name
        id: vars
        run: |
          set -euo pipefail
          IMAGE="ghcr.io/$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.image }}
          tags: |
            type=raw,value=latest,enable=${{ matrix.push_latest }}
            type=ref,event=branch,enable=${{ matrix.push_branch }}
            type=ref,event=tag,enable=${{ matrix.push_semver }}
            type=semver,pattern=v{{version}},enable=${{ matrix.push_semver }}
            type=semver,pattern=v{{major}}.{{minor}},enable=${{ matrix.push_semver }}
            type=semver,pattern=v{{major}},enable=${{ matrix.push_semver }}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
